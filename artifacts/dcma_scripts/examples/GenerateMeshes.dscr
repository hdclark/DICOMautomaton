#!/usr/bin/env -S dicomautomaton_dispatcher -v

# This script provides examples of the the GenerateMeshes operation.

# Spatial resolutions along x, y, and z axes.
res = "0.25, 0.25, 0.75";

# This sphere is large compared to the resolution, so will be smooth and have
# lots of vertices.
GenerateMeshes(
    Resolution = res,
    MeshLabel = 'large sphere',
    Objects = 'sphere(7.0)',
){};

# This sphere is small compared to the resolution, so will be 'blocky'.
GenerateMeshes(
    Resolution = res,
    MeshLabel = 'small sphere',
    Objects = 'sphere(2.0)',
){};

# A simple asymmetric axis-aligned box.
GenerateMeshes(
    Resolution = res,
    MeshLabel = 'box',
    Objects = 'aa_box(1.0, 2.0, 4.0)',
){};

# Two disjoint spheres.
GenerateMeshes(
    Resolution = res,
    MeshLabel = 'sphere + sphere',
    Objects = '
        join(){
            sphere(5.0);
            translate(8.0, 8.0, 8.0){ 
                sphere(5.0)
            }
        }',
){};

# Two conjoined spheres.
GenerateMeshes(
    Resolution = res,
    MeshLabel = 'sphere + sphere',
    Objects = '
        join(){
            sphere(5.0);
            translate(3.0, 3.0, 3.0){ 
                sphere(6.0)
            }
        }',
){};

# Boolean addition (join) of a sphere and an axis-aligned box.
GenerateMeshes(
    Resolution = res,
    MeshLabel = 'sphere + box',
    Objects = 'join(){ sphere(4.0); aa_box(3.0, 6.0, 8.0); }',
){};

# Same as previous, but objects specified in opposite order.
# (Joins are commutative.)
GenerateMeshes(
    Resolution = res,
    MeshLabel = 'box + sphere',
    Objects = 'join(){ aa_box(3.0, 6.0, 8.0); sphere(4.0); }',
){};

# Same as previous, but the box in a different orientation.
# (The result should be the same, except for differences due to resolutions.)
GenerateMeshes(
    Resolution = res,
    MeshLabel = 'box + sphere',
    Objects = 'join(){ aa_box(8.0, 6.0, 3.0); sphere(4.0); }',
){};

# Boolean subtraction of a box from a sphere.
GenerateMeshes(
    Resolution = res,
    MeshLabel = 'sphere - box',
    Objects = 'subtract(){ sphere(12.0); aa_box(8.0, 20.0, 20.0); }',
){};

# Same as previous, but objects specified in opposite order.
# (Subtractions are not commutative.)
GenerateMeshes(
    Resolution = res,
    MeshLabel = 'box - sphere',
    Objects = 'subtract(){ aa_box(8.0, 20.0, 20.0); sphere(12.0); }',
){};

# Same as above, but the subtraction is 'chamfered' so it bridges the sphere
# and box with a 'ramp'.
GenerateMeshes(
    Resolution = res,
    MeshLabel = 'chamfered (box - sphere)',
    Objects = 'chamfer_subtract(2.0){ aa_box(8.0, 20.0, 20.0); sphere(12.0); }',
){};

# Same as previous, but the chamfer is increased.
GenerateMeshes(
    Resolution = res,
    MeshLabel = 'chamfered (box - sphere)',
    Objects = 'chamfer_subtract(3.0){ aa_box(8.0, 20.0, 20.0); sphere(12.0); }',
){};

# A complicated example with compound Boolean operations.
GenerateMeshes(
    Resolution = res,
    MeshLabel = 'Boolean composite "hollow star"',
    Objects = '
        subtract(){
            join(){
                aa_box(15.0, 3.0, 3.0);
                aa_box(3.0, 15.0, 3.0);
                aa_box(3.0, 3.0, 15.0);
            };
            join(){
                aa_box(20.0, 2.0, 2.0);
                aa_box(2.0, 20.0, 2.0);
                aa_box(2.0, 2.0, 20.0);
                sphere(6.0);
            };
        }',
){};

# Similar to previous, but with rotations.
GenerateMeshes(
    Resolution = res,
    MeshLabel = 'box + box + box + box',
    Objects = '
        join(){
            aa_box(15.0, 3.0, 3.0);
            rotate(0, 0, 1, 0.75){ aa_box(3.0, 15.0, 3.0) };
            rotate(0, 1, 0, 0.75){ aa_box(3.0, 3.0, 15.0) };
            rotate(1, 1, 0, 0.25){ aa_box(2.0, 2.0, 20.0) };
        }',
){};

# Toroidal box.
GenerateMeshes(
    Resolution = res,
    MeshLabel = 'toroidal box',
    Objects = '
        join(){
            translate( 0,-7.5, 0){ rotate(1, 0, 0, 0.75){ aa_box(10.0, 3.0, 3.0); }; };
            translate( 0, 7.5, 0){ rotate(1, 0, 0, 0.75){ aa_box(10.0, 3.0, 3.0); }; };
            translate(-7.5, 0, 0){ rotate(0, 1, 0, 0.75){ aa_box(3.0, 10.0, 3.0); }; };
            translate( 7.5, 0, 0){ rotate(0, 1, 0, 0.75){ aa_box(3.0, 10.0, 3.0); }; };
        }',
){};

# Dilated (i.e., 'inflated' or 'expanded') and eroded (i.e., 'deflated' or
# 'contracted') boxes.
GenerateMeshes(
    Resolution = res,
    MeshLabel = 'dilated box',
    Objects = '
        join(){
            translate(-30, 0, 0){ dilate(4.0){ aa_box( 10.0, 15.0, 20.0 ); }; };
            translate(  0, 0, 0){              aa_box( 10.0, 15.0, 20.0 );    };
            translate( 20, 0, 0){  erode(4.0){ aa_box( 10.0, 15.0, 20.0 ); }; };
        }',
){};

# Dilation and erosion are not exactly commutative since the SDF may not be
# entirely accurate (especially when Booleans are performed).
GenerateMeshes(
    Resolution = res,
    MeshLabel = 'commutative dilation + erosion',
    Objects = '
        join(){
            translate(-30, 0, 0){ erode(4.0){ dilate(4.0){ aa_box( 10.0, 15.0, 20.0 ); }; }; };
            translate(  0, 0, 0){                          aa_box( 10.0, 15.0, 20.0 );    };
            translate( 30, 0, 0){ dilate(4.0){ erode(4.0){ aa_box( 10.0, 15.0, 20.0 ); }; }; };
        }',
){};

# Poly chain example. 
GenerateMeshes(
    Resolution = res,
    MeshLabel = 'poly chain',
    Objects = '
        poly_chain(2.5,  0,0,0,   0,10,0,   10,10,0,   10,0,0,
                         0,0,10,  0,10,10,  10,10,10,  10,0,10,

                         20,0,20, 20,20,20, 0,20,20,
                         20,20,0, 10,10,10
                  );
    ',
){};

# Text example.
GenerateMeshes(
    Resolution = res,
    MeshLabel = 'text',
    Objects = 'text(1.0, "ABOVE (123)\
BELOW [456]");',
){};

# Extrusion example with default cutting xy plane at 0,0,0.
GenerateMeshes(
    Resolution = res,
    MeshLabel = 'circle extrusion (cylinder)',
    Objects = ' extrude(5.0){ sphere(7.0); }; ',
){};

# Extrusion example with oblique cutting plane and offset.
GenerateMeshes(
    Resolution = res,
    MeshLabel = 'oblique cut and extrusion',
    Objects = '
        extrude(5.0, 1.2,1.5,1.9, 0,0.5,1.5){
            aa_box(10.0, 10.0, 10.0);
        };
    ',
){};

